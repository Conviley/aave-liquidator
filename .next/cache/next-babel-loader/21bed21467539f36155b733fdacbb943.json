{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Diddi\\\\Documents\\\\crypto\\\\aave-liquidation\\\\pages\\\\settings.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Checkbox } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport SettingsFormInput from '../components/SettingFormInput';\nimport FileSaver from 'file-saver';\nimport web3 from '../src/web3.js';\n\nvar Settings = /*#__PURE__*/function (_Component) {\n  _inherits(Settings, _Component);\n\n  var _super = _createSuper(Settings);\n\n  function Settings() {\n    var _this;\n\n    _classCallCheck(this, Settings);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      liquidatorAddress: '',\n      addressToLiquidate: '',\n      collateralAddress: '',\n      repayTokenAddress: '',\n      lpAddressProviderAddress: '',\n      lpAddress: '',\n      latestLpCoreAddress: '',\n      wss: '',\n      http: '',\n      mnemonic: '',\n      ethGasStationAPIKey: '',\n      dynamicGasPrice: false,\n      liquidationAmount: '',\n      gasPrice: '',\n      gasLimit: '',\n      receiveATokens: false,\n      formError: false,\n      liquidatorAddressError: false,\n      addressToLiquidateError: false,\n      collateralAddressError: false,\n      repayTokenAddressError: false,\n      lpAddressProviderAddressError: false,\n      lpAddressError: false,\n      latestLpCoreAddressError: false,\n      wssError: false,\n      httpError: false,\n      mnemonicError: false,\n      ethGasStationAPIKeyError: false,\n      dynamicGasPriceError: false,\n      liquidationAmountError: false,\n      gasPriceError: false,\n      gasLimitError: false,\n      receiveAtokensError: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      event.preventDefault();\n      console.log(_this.state);\n\n      _this.validateState();\n\n      var configFile = {\n        liquidatorAddress: _this.state.liquidatorAddress,\n        addressToLiquidate: _this.state.addressToLiquidate,\n        collateralAddress: _this.state.collateralAddress,\n        repayTokenAddress: _this.state.repayTokenAddress,\n        lpAddressProviderAddress: _this.state.lpAddressProviderAddress,\n        lpAddress: _this.state.lpAddress,\n        latestLpCoreAddress: _this.state.latestLpCoreAddress,\n        wss: _this.state.wss,\n        http: _this.state.http,\n        mnemonic: _this.state.mnemonic,\n        ethGasStationAPIKey: _this.state.ethGasStationAPIKey,\n        dynamicGasPrice: _this.state.dynamicGasPrice,\n        liquidationAmount: _this.state.liquidationAmount,\n        gasPrice: _this.state.gasPrice,\n        gasLimit: _this.state.gasLimit,\n        receiveATokens: _this.state.receiveATokens\n      };\n      var blob = new Blob([JSON.stringify(configFile)], {\n        type: 'application/json'\n      });\n      FileSaver.saveAs(blob, 'settings.json');\n\n      _this.updateSessionStorage(_this.state);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hiddenFileInput\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadSettings\", function () {\n      _this.hiddenFileInput.current.click();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"readSettings\", function (event) {\n      console.log('poppopopop');\n      var fileUploaded = event.target.files[0];\n      var fr = new FileReader();\n\n      fr.onload = function (e) {\n        var result = JSON.parse(e.target.result);\n\n        _this.setState({\n          liquidatorAddress: result.liquidatorAddress,\n          addressToLiquidate: result.addressToLiquidate,\n          collateralAddress: result.collateralAddress,\n          repayTokenAddress: result.repayTokenAddress,\n          lpAddressProviderAddress: result.lpAddressProviderAddress,\n          lpAddress: result.lpAddress,\n          latestLpCoreAddress: result.latestLpCoreAddress,\n          wss: result.wss,\n          http: result.http,\n          mnemonic: result.mnemonic,\n          ethGasStationAPIKey: result.ethGasStationAPIKey,\n          dynamicGasPrice: result.dynamicGasPrice,\n          liquidationAmount: result.liquidationAmount,\n          gasPrice: result.gasPrice,\n          gasLimit: result.gasLimit,\n          receiveATokens: result.receiveATokens\n        });\n\n        _this.updateSessionStorage(result);\n\n        var formatted = JSON.stringify(result, null, 2);\n        console.log(formatted);\n      };\n\n      fr.readAsText(fileUploaded);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateState\", function () {\n      var error = false; // Address Validity Check\n\n      Object.keys(_this.state).map(function (key) {\n        if (key.endsWith('Address') || key == 'addressToLiquidate') {\n          var validAddress;\n          validAddress = !web3.web3.utils.isAddress(_this.state[key]);\n\n          _this.setState(_defineProperty({}, key + 'Error', validAddress));\n\n          if (validAddress) {\n            error = true;\n          }\n        }\n      });\n\n      if (!_this.state.wss.startsWith('wss://')) {\n        _this.setState({\n          wssError: true\n        });\n\n        error = true;\n      }\n\n      if (!_this.state.http.startsWith('https://')) {\n        _this.setState({\n          httpError: true\n        });\n\n        error = true;\n      }\n\n      if (_this.state.mnemonic.split(' ').length != 12) {\n        _this.setState({\n          mnemonicError: true\n        });\n\n        error = true;\n      }\n\n      if (isNaN(_this.state.liquidationAmount)) {\n        _this.setState({\n          liquidationAmountError: true\n        });\n\n        error = true;\n      }\n\n      if (isNaN(_this.state.gasLimit)) {\n        _this.setState({\n          gasLimitError: true\n        });\n\n        error = true;\n      }\n\n      if (isNaN(_this.state.gasPrice)) {\n        _this.setState({\n          gasPriceError: true\n        });\n\n        error = true;\n      }\n\n      _this.setState({\n        formError: error\n      });\n\n      return error;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateSessionStorage\", function (data) {\n      sessionStorage.setItem('liquidatorAddress', data.liquidatorAddress);\n      sessionStorage.setItem('addressToLiquidate', data.addressToLiquidate);\n      sessionStorage.setItem('collateralAddress', data.collateralAddress);\n      sessionStorage.setItem('repayTokenAddress', data.repayTokenAddress);\n      sessionStorage.setItem('lpAddressProviderAddress', data.lpAddressProviderAddress);\n      sessionStorage.setItem('lpAddress', data.lpAddress);\n      sessionStorage.setItem('latestLpCoreAddress', data.latestLpCoreAddress);\n      sessionStorage.setItem('wss', data.wss);\n      sessionStorage.setItem('http', data.http);\n      sessionStorage.setItem('mnemonic', data.mnemonic);\n      sessionStorage.setItem('ethGasStationAPIKey', data.ethGasStationAPIKey);\n      sessionStorage.setItem('dynamicGasPrice', data.dynamicGasPrice);\n      sessionStorage.setItem('liquidationAmount', data.liquidationAmount);\n      sessionStorage.setItem('gasPrice', data.gasPrice);\n      sessionStorage.setItem('gasLimit', data.gasLimit);\n      sessionStorage.setItem('receiveATokens', data.receiveATokens);\n    });\n\n    return _this;\n  }\n\n  _createClass(Settings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        liquidatorAddress: sessionStorage.getItem('liquidatorAddress'),\n        addressToLiquidate: sessionStorage.getItem('addressToLiquidate'),\n        collateralAddress: sessionStorage.getItem('collateralAddress'),\n        repayTokenAddress: sessionStorage.getItem('repayTokenAddress'),\n        lpAddressProviderAddress: sessionStorage.getItem('lpAddressProviderAddress'),\n        lpAddress: sessionStorage.getItem('lpAddress'),\n        latestLpCoreAddress: sessionStorage.getItem('latestLpCoreAddress'),\n        wss: sessionStorage.getItem('wss'),\n        http: sessionStorage.getItem('http'),\n        mnemonic: sessionStorage.getItem('mnemonic'),\n        ethGasStationAPIKey: sessionStorage.getItem('ethGasStationAPIKey'),\n        dynamicGasPrice: sessionStorage.getItem('dynamicGasPrice') == 'true',\n        liquidationAmount: sessionStorage.getItem('liquidationAmount'),\n        gasPrice: sessionStorage.getItem('gasPrice'),\n        gasLimit: sessionStorage.getItem('gasLimit'),\n        receiveATokens: sessionStorage.getItem('receiveATokens') == 'true'\n      });\n    } //add write to session storage onchange on the unputs\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.liquidationAddressError, 'RENDER'); //this.updateSessionStorage(this.state)\n\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 7\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }\n      }, \"Liquidation Settings\"), __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: this.state.formError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }, __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"Liquidator Address\",\n        error: this.state.liquidatorAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"Address which makes the liquidation call\",\n        value: this.state.liquidatorAddress,\n        onChange: function onChange(event) {\n          _this2.setState({\n            liquidatorAddress: event.target.value\n          });\n\n          sessionStorage.setItem('liquidatorAddress', event.target.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Address To Liquidate\",\n        error: this.state.addressToLiquidateError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"Address to be liquidated\",\n        value: this.state.addressToLiquidate,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            addressToLiquidate: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"Collateral Address\",\n        error: this.state.collateralAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"Address of the collateral to receive\",\n        value: this.state.collateralAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            collateralAddress: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Repay Token Address\",\n        error: this.state.repayTokenAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"Address of the token that is repaid\",\n        value: this.state.repayTokenAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            repayTokenAddress: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"LendingPoolAddressProvider Address\",\n        error: this.state.lpAddressProviderAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"LendingPoolAddressProvider contract address\",\n        value: this.state.lpAddressProviderAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            lpAddressProviderAddress: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"LendingPool Address\",\n        error: this.state.lpAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"LendingPool contract address\",\n        value: this.state.lpAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            lpAddress: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"LendingPoolCore Address\",\n        error: this.state.latestLpCoreAddressError,\n        errorContent: 'Please enter a valid address',\n        inputLabel: \"HEX\",\n        placeholder: \"LendingPoolCore contract address\",\n        value: this.state.latestLpCoreAddress,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            latestLpCoreAddress: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Infura WSS Address\",\n        error: this.state.wssError,\n        errorContent: 'Must start with <wss://>',\n        inputLabel: \"URL\",\n        placeholder: \"Infura WSS project endpoint\",\n        value: this.state.wss,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            wss: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"Infura HTTP Address\",\n        error: this.state.httpError,\n        errorContent: 'Must start with <https://>',\n        inputLabel: \"URL\",\n        placeholder: \"Infura http project endpoint\",\n        value: this.state.http,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            http: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Wallet Mneumonic / Seed Phrase\",\n        error: this.state.mnemonicError,\n        errorContent: 'Must input 12 word seed phrase',\n        inputLabel: \"String\",\n        placeholder: \"12 word seed phrase\",\n        value: this.state.mnemonic,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            mnemonic: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"Liquidation Amount\",\n        error: this.state.liquidationAmountError,\n        errorContent: 'Must be numeric',\n        inputLabel: \"WEI\",\n        placeholder: \"<0> for max liquidation\",\n        value: this.state.liquidationAmount,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            liquidationAmount: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Gas Limit\",\n        error: this.state.gasLimitError,\n        errorContent: 'Must be numeric',\n        inputLabel: \"GAS\",\n        placeholder: \"Max amount of gas liquidator is allowed to spend\",\n        value: this.state.gasLimit,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            gasLimit: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }\n      }, __jsx(SettingsFormInput, {\n        label: \"ETH GAS STATION API KEY\",\n        error: this.state.ethGasStationAPIKeyError,\n        errorContent: 'None',\n        inputLabel: \"String\",\n        placeholder: \"Ethereum Gas station api key\",\n        value: this.state.ethGasStationAPIKey,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            ethGasStationAPIKey: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }\n      }), __jsx(SettingsFormInput, {\n        label: \"Gas Price\",\n        error: this.state.gasPriceError,\n        errorContent: 'Must be numeric',\n        inputLabel: \"WEI\",\n        placeholder: \"Gas price\",\n        value: this.state.gasPrice,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            gasPrice: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }\n      })), __jsx(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }\n      }, __jsx(Form.Input, {\n        label: \"Use Dynamic Gas Price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, {\n        toggle: true,\n        checked: this.state.dynamicGasPrice,\n        onChange: function onChange() {\n          return _this2.setState(function (_ref) {\n            var dynamicGasPrice = _ref.dynamicGasPrice;\n            return {\n              dynamicGasPrice: !dynamicGasPrice\n            };\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }\n      })), __jsx(Form.Input, {\n        label: \"Receive Collateral as aTokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, {\n        toggle: true,\n        checked: this.state.receiveATokens,\n        onChange: function onChange() {\n          return _this2.setState(function (_ref2) {\n            var receiveATokens = _ref2.receiveATokens;\n            return {\n              receiveATokens: !receiveATokens\n            };\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }\n      }))), __jsx(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }\n      }), __jsx(Button, {\n        primary: true,\n        labelPosition: \"left\",\n        icon: \"download\",\n        content: \"Save\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }\n      }), __jsx(Button, {\n        type: \"button\",\n        content: \"Upload Settings\",\n        labelPosition: \"left\",\n        icon: \"file\",\n        onClick: this.uploadSettings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }\n      }), __jsx(\"input\", {\n        type: \"file\",\n        ref: this.hiddenFileInput,\n        onChange: this.readSettings,\n        style: {\n          display: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Settings;\n}(Component);\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/Diddi/Documents/crypto/aave-liquidation/pages/settings.js"],"names":["React","Component","Form","Button","Input","Message","Checkbox","Layout","SettingsFormInput","FileSaver","web3","Settings","liquidatorAddress","addressToLiquidate","collateralAddress","repayTokenAddress","lpAddressProviderAddress","lpAddress","latestLpCoreAddress","wss","http","mnemonic","ethGasStationAPIKey","dynamicGasPrice","liquidationAmount","gasPrice","gasLimit","receiveATokens","formError","liquidatorAddressError","addressToLiquidateError","collateralAddressError","repayTokenAddressError","lpAddressProviderAddressError","lpAddressError","latestLpCoreAddressError","wssError","httpError","mnemonicError","ethGasStationAPIKeyError","dynamicGasPriceError","liquidationAmountError","gasPriceError","gasLimitError","receiveAtokensError","event","preventDefault","console","log","state","validateState","configFile","blob","Blob","JSON","stringify","type","saveAs","updateSessionStorage","createRef","hiddenFileInput","current","click","fileUploaded","target","files","fr","FileReader","onload","e","result","parse","setState","formatted","readAsText","error","Object","keys","map","key","endsWith","validAddress","utils","isAddress","startsWith","split","length","isNaN","data","sessionStorage","setItem","getItem","liquidationAddressError","onSubmit","value","errorMessage","uploadSettings","readSettings","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form, Button, Input, Message, Checkbox } from 'semantic-ui-react'\r\nimport Layout from '../components/Layout'\r\nimport SettingsFormInput from '../components/SettingFormInput'\r\nimport FileSaver from 'file-saver'\r\nimport web3 from '../src/web3.js'\r\n\r\nclass Settings extends Component {\r\n  state = {\r\n    liquidatorAddress: '',\r\n    addressToLiquidate: '',\r\n    collateralAddress: '',\r\n    repayTokenAddress: '',\r\n    lpAddressProviderAddress: '',\r\n    lpAddress: '',\r\n    latestLpCoreAddress: '',\r\n    wss: '',\r\n    http: '',\r\n    mnemonic: '',\r\n    ethGasStationAPIKey: '',\r\n    dynamicGasPrice: false,\r\n    liquidationAmount: '',\r\n    gasPrice: '',\r\n    gasLimit: '',\r\n    receiveATokens: false,\r\n    formError: false,\r\n    liquidatorAddressError: false,\r\n    addressToLiquidateError: false,\r\n    collateralAddressError: false,\r\n    repayTokenAddressError: false,\r\n    lpAddressProviderAddressError: false,\r\n    lpAddressError: false,\r\n    latestLpCoreAddressError: false,\r\n    wssError: false,\r\n    httpError: false,\r\n    mnemonicError: false,\r\n    ethGasStationAPIKeyError: false,\r\n    dynamicGasPriceError: false,\r\n    liquidationAmountError: false,\r\n    gasPriceError: false,\r\n    gasLimitError: false,\r\n    receiveAtokensError: false,\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log(this.state)\r\n\r\n    this.validateState()\r\n\r\n    var configFile = {\r\n      liquidatorAddress: this.state.liquidatorAddress,\r\n      addressToLiquidate: this.state.addressToLiquidate,\r\n      collateralAddress: this.state.collateralAddress,\r\n      repayTokenAddress: this.state.repayTokenAddress,\r\n      lpAddressProviderAddress: this.state.lpAddressProviderAddress,\r\n      lpAddress: this.state.lpAddress,\r\n      latestLpCoreAddress: this.state.latestLpCoreAddress,\r\n      wss: this.state.wss,\r\n      http: this.state.http,\r\n      mnemonic: this.state.mnemonic,\r\n      ethGasStationAPIKey: this.state.ethGasStationAPIKey,\r\n      dynamicGasPrice: this.state.dynamicGasPrice,\r\n      liquidationAmount: this.state.liquidationAmount,\r\n      gasPrice: this.state.gasPrice,\r\n      gasLimit: this.state.gasLimit,\r\n      receiveATokens: this.state.receiveATokens,\r\n    }\r\n    var blob = new Blob([JSON.stringify(configFile)], {\r\n      type: 'application/json',\r\n    })\r\n    FileSaver.saveAs(blob, 'settings.json')\r\n    this.updateSessionStorage(this.state)\r\n  }\r\n\r\n  hiddenFileInput = React.createRef()\r\n  uploadSettings = () => {\r\n    this.hiddenFileInput.current.click()\r\n  }\r\n  readSettings = (event) => {\r\n    console.log('poppopopop')\r\n    var fileUploaded = event.target.files[0]\r\n    var fr = new FileReader()\r\n    fr.onload = (e) => {\r\n      var result = JSON.parse(e.target.result)\r\n\r\n      this.setState({\r\n        liquidatorAddress: result.liquidatorAddress,\r\n        addressToLiquidate: result.addressToLiquidate,\r\n        collateralAddress: result.collateralAddress,\r\n        repayTokenAddress: result.repayTokenAddress,\r\n        lpAddressProviderAddress: result.lpAddressProviderAddress,\r\n        lpAddress: result.lpAddress,\r\n        latestLpCoreAddress: result.latestLpCoreAddress,\r\n        wss: result.wss,\r\n        http: result.http,\r\n        mnemonic: result.mnemonic,\r\n        ethGasStationAPIKey: result.ethGasStationAPIKey,\r\n        dynamicGasPrice: result.dynamicGasPrice,\r\n        liquidationAmount: result.liquidationAmount,\r\n        gasPrice: result.gasPrice,\r\n        gasLimit: result.gasLimit,\r\n        receiveATokens: result.receiveATokens,\r\n      })\r\n      this.updateSessionStorage(result)\r\n      var formatted = JSON.stringify(result, null, 2)\r\n      console.log(formatted)\r\n    }\r\n\r\n    fr.readAsText(fileUploaded)\r\n  }\r\n  validateState = () => {\r\n    let error = false\r\n\r\n    // Address Validity Check\r\n    Object.keys(this.state).map((key) => {\r\n      if (key.endsWith('Address') || key == 'addressToLiquidate') {\r\n        let validAddress\r\n        validAddress = !web3.web3.utils.isAddress(this.state[key])\r\n        this.setState({ [key + 'Error']: validAddress })\r\n        if (validAddress) {\r\n          error = true\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!this.state.wss.startsWith('wss://')) {\r\n      this.setState({ wssError: true })\r\n      error = true\r\n    }\r\n\r\n    if (!this.state.http.startsWith('https://')) {\r\n      this.setState({ httpError: true })\r\n      error = true\r\n    }\r\n\r\n    if (this.state.mnemonic.split(' ').length != 12) {\r\n      this.setState({ mnemonicError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.liquidationAmount)) {\r\n      this.setState({ liquidationAmountError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.gasLimit)) {\r\n      this.setState({ gasLimitError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.gasPrice)) {\r\n      this.setState({ gasPriceError: true })\r\n      error = true\r\n    }\r\n\r\n    this.setState({ formError: error })\r\n    return error\r\n  }\r\n\r\n  updateSessionStorage = (data) => {\r\n    sessionStorage.setItem('liquidatorAddress', data.liquidatorAddress)\r\n    sessionStorage.setItem('addressToLiquidate', data.addressToLiquidate)\r\n    sessionStorage.setItem('collateralAddress', data.collateralAddress)\r\n    sessionStorage.setItem('repayTokenAddress', data.repayTokenAddress)\r\n    sessionStorage.setItem(\r\n      'lpAddressProviderAddress',\r\n      data.lpAddressProviderAddress\r\n    )\r\n    sessionStorage.setItem('lpAddress', data.lpAddress)\r\n    sessionStorage.setItem('latestLpCoreAddress', data.latestLpCoreAddress)\r\n    sessionStorage.setItem('wss', data.wss)\r\n    sessionStorage.setItem('http', data.http)\r\n    sessionStorage.setItem('mnemonic', data.mnemonic)\r\n    sessionStorage.setItem('ethGasStationAPIKey', data.ethGasStationAPIKey)\r\n    sessionStorage.setItem('dynamicGasPrice', data.dynamicGasPrice)\r\n    sessionStorage.setItem('liquidationAmount', data.liquidationAmount)\r\n    sessionStorage.setItem('gasPrice', data.gasPrice)\r\n    sessionStorage.setItem('gasLimit', data.gasLimit)\r\n    sessionStorage.setItem('receiveATokens', data.receiveATokens)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      liquidatorAddress: sessionStorage.getItem('liquidatorAddress'),\r\n      addressToLiquidate: sessionStorage.getItem('addressToLiquidate'),\r\n      collateralAddress: sessionStorage.getItem('collateralAddress'),\r\n      repayTokenAddress: sessionStorage.getItem('repayTokenAddress'),\r\n      lpAddressProviderAddress: sessionStorage.getItem(\r\n        'lpAddressProviderAddress'\r\n      ),\r\n      lpAddress: sessionStorage.getItem('lpAddress'),\r\n      latestLpCoreAddress: sessionStorage.getItem('latestLpCoreAddress'),\r\n      wss: sessionStorage.getItem('wss'),\r\n      http: sessionStorage.getItem('http'),\r\n      mnemonic: sessionStorage.getItem('mnemonic'),\r\n      ethGasStationAPIKey: sessionStorage.getItem('ethGasStationAPIKey'),\r\n      dynamicGasPrice: sessionStorage.getItem('dynamicGasPrice') == 'true',\r\n      liquidationAmount: sessionStorage.getItem('liquidationAmount'),\r\n      gasPrice: sessionStorage.getItem('gasPrice'),\r\n      gasLimit: sessionStorage.getItem('gasLimit'),\r\n      receiveATokens: sessionStorage.getItem('receiveATokens') == 'true',\r\n    })\r\n  }\r\n  //add write to session storage onchange on the unputs\r\n  render() {\r\n    console.log(this.state.liquidationAddressError, 'RENDER')\r\n    //this.updateSessionStorage(this.state)\r\n    return (\r\n      <Layout>\r\n        <h1>Liquidation Settings</h1>\r\n        <Form onSubmit={this.onSubmit} error={this.state.formError}>\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Liquidator Address\"\r\n              error={this.state.liquidatorAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address which makes the liquidation call\"\r\n              value={this.state.liquidatorAddress}\r\n              onChange={(event) => {\r\n                this.setState({ liquidatorAddress: event.target.value })\r\n                sessionStorage.setItem('liquidatorAddress', event.target.value)\r\n              }}\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Address To Liquidate\"\r\n              error={this.state.addressToLiquidateError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address to be liquidated\"\r\n              value={this.state.addressToLiquidate}\r\n              onChange={(event) =>\r\n                this.setState({ addressToLiquidate: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Collateral Address\"\r\n              error={this.state.collateralAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address of the collateral to receive\"\r\n              value={this.state.collateralAddress}\r\n              onChange={(event) =>\r\n                this.setState({ collateralAddress: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Repay Token Address\"\r\n              error={this.state.repayTokenAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address of the token that is repaid\"\r\n              value={this.state.repayTokenAddress}\r\n              onChange={(event) =>\r\n                this.setState({ repayTokenAddress: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"LendingPoolAddressProvider Address\"\r\n              error={this.state.lpAddressProviderAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPoolAddressProvider contract address\"\r\n              value={this.state.lpAddressProviderAddress}\r\n              onChange={(event) =>\r\n                this.setState({\r\n                  lpAddressProviderAddress: event.target.value,\r\n                })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"LendingPool Address\"\r\n              error={this.state.lpAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPool contract address\"\r\n              value={this.state.lpAddress}\r\n              onChange={(event) =>\r\n                this.setState({ lpAddress: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"LendingPoolCore Address\"\r\n              error={this.state.latestLpCoreAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPoolCore contract address\"\r\n              value={this.state.latestLpCoreAddress}\r\n              onChange={(event) =>\r\n                this.setState({ latestLpCoreAddress: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Infura WSS Address\"\r\n              error={this.state.wssError}\r\n              errorContent={'Must start with <wss://>'}\r\n              inputLabel=\"URL\"\r\n              placeholder=\"Infura WSS project endpoint\"\r\n              value={this.state.wss}\r\n              onChange={(event) => this.setState({ wss: event.target.value })}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Infura HTTP Address\"\r\n              error={this.state.httpError}\r\n              errorContent={'Must start with <https://>'}\r\n              inputLabel=\"URL\"\r\n              placeholder=\"Infura http project endpoint\"\r\n              value={this.state.http}\r\n              onChange={(event) => this.setState({ http: event.target.value })}\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Wallet Mneumonic / Seed Phrase\"\r\n              error={this.state.mnemonicError}\r\n              errorContent={'Must input 12 word seed phrase'}\r\n              inputLabel=\"String\"\r\n              placeholder=\"12 word seed phrase\"\r\n              value={this.state.mnemonic}\r\n              onChange={(event) =>\r\n                this.setState({ mnemonic: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Liquidation Amount\"\r\n              error={this.state.liquidationAmountError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"WEI\"\r\n              placeholder=\"<0> for max liquidation\"\r\n              value={this.state.liquidationAmount}\r\n              onChange={(event) =>\r\n                this.setState({ liquidationAmount: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Gas Limit\"\r\n              error={this.state.gasLimitError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"GAS\"\r\n              placeholder=\"Max amount of gas liquidator is allowed to spend\"\r\n              value={this.state.gasLimit}\r\n              onChange={(event) =>\r\n                this.setState({ gasLimit: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"ETH GAS STATION API KEY\"\r\n              error={this.state.ethGasStationAPIKeyError}\r\n              errorContent={'None'}\r\n              inputLabel=\"String\"\r\n              placeholder=\"Ethereum Gas station api key\"\r\n              value={this.state.ethGasStationAPIKey}\r\n              onChange={(event) =>\r\n                this.setState({ ethGasStationAPIKey: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Gas Price\"\r\n              error={this.state.gasPriceError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"WEI\"\r\n              placeholder=\"Gas price\"\r\n              value={this.state.gasPrice}\r\n              onChange={(event) =>\r\n                this.setState({ gasPrice: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Input label=\"Use Dynamic Gas Price\">\r\n              <Checkbox\r\n                toggle\r\n                checked={this.state.dynamicGasPrice}\r\n                onChange={() =>\r\n                  this.setState(({ dynamicGasPrice }) => ({\r\n                    dynamicGasPrice: !dynamicGasPrice,\r\n                  }))\r\n                }\r\n              />\r\n            </Form.Input>\r\n\r\n            <Form.Input label=\"Receive Collateral as aTokens\">\r\n              <Checkbox\r\n                toggle\r\n                checked={this.state.receiveATokens}\r\n                onChange={() =>\r\n                  this.setState(({ receiveATokens }) => ({\r\n                    receiveATokens: !receiveATokens,\r\n                  }))\r\n                }\r\n              />\r\n            </Form.Input>\r\n          </Form.Group>\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          <Button primary labelPosition=\"left\" icon=\"download\" content=\"Save\" />\r\n\r\n          <Button\r\n            type=\"button\"\r\n            content=\"Upload Settings\"\r\n            labelPosition=\"left\"\r\n            icon=\"file\"\r\n            onClick={this.uploadSettings}\r\n          />\r\n          <input\r\n            type=\"file\"\r\n            ref={this.hiddenFileInput}\r\n            onChange={this.readSettings}\r\n            style={{ display: 'none' }}\r\n          />\r\n        </Form>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Settings\r\n"]},"metadata":{},"sourceType":"module"}