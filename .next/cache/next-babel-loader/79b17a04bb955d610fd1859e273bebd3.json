{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diddi\\\\Documents\\\\crypto\\\\aave-liquidation\\\\pages\\\\settings.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message, Checkbox } from 'semantic-ui-react';\nimport Layout from '../components/Layout';\nimport SettingsFormInput from '../components/SettingFormInput';\nimport FileSaver from 'file-saver';\nimport web3 from '../src/web3.js';\n\nclass Settings extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      liquidatorAddress: '',\n      addressToLiquidate: '',\n      collateralAddress: '',\n      repayTokenAddress: '',\n      lpAddressProviderAddress: '',\n      lpAddress: '',\n      latestLpCoreAddress: '',\n      wss: '',\n      http: '',\n      mnemonic: '',\n      ethGasStationAPIKey: '',\n      dynamicGasPrice: false,\n      liquidationAmount: '',\n      gasPrice: '',\n      gasLimit: '',\n      receiveATokens: false,\n      formError: false,\n      liquidatorAddressError: false,\n      addressToLiquidateError: false,\n      collateralAddressError: false,\n      repayTokenAddressError: false,\n      lpAddressProviderAddressError: false,\n      lpAddressError: false,\n      latestLpCoreAddressError: false,\n      wssError: false,\n      httpError: false,\n      mnemonicError: false,\n      ethGasStationAPIKeyError: false,\n      dynamicGasPriceError: false,\n      liquidationAmountError: false,\n      gasPriceError: false,\n      gasLimitError: false,\n      receiveAtokensError: false\n    });\n\n    _defineProperty(this, \"onSubmit\", event => {\n      event.preventDefault();\n      console.log(this.state);\n      let error = false; // Address Validity Check\n\n      Object.keys(this.state).map(key => {\n        if (key.endsWith('Address') || key == 'addressToLiquidate') {\n          var validAddress = !web3.web3.utils.checkAddressChecksum(this.state[key]);\n          this.setState({\n            [key + 'Error']: validAddress\n          });\n\n          if (validAddress) {\n            error = true;\n          }\n        }\n      });\n\n      if (!this.state.wss.startsWith('wss://')) {\n        this.setState({\n          wssError: true\n        });\n        error = true;\n      }\n\n      if (!this.state.http.startsWith('https://')) {\n        this.setState({\n          httpError: true\n        });\n        error = true;\n      }\n\n      if (this.state.mnemonic.split(' ').length != 12) {\n        this.setState({\n          mnemonicError: true\n        });\n        error = true;\n      }\n\n      if (isNaN(this.state.liquidationAmount)) {\n        this.setState({\n          liquidationAmountError: true\n        });\n        error = true;\n      }\n\n      if (isNaN(this.state.gasLimit)) {\n        this.setState({\n          gasLimitError: true\n        });\n        error = true;\n      }\n\n      if (isNaN(this.state.gasPrice)) {\n        this.setState({\n          gasPriceError: true\n        });\n        error = true;\n      }\n\n      if (error) {\n        this.setState({\n          formError: true\n        });\n        return;\n      }\n\n      var configFile = {\n        liquidatorAddress: this.state.liquidatorAddress,\n        addressToLiquidate: this.state.addressToLiquidate,\n        collateralAddress: this.state.collateralAddress,\n        repayTokenAddress: this.state.repayTokenAddress,\n        lpAddressProviderAddress: this.state.lpAddressProviderAddress,\n        lpAddress: this.state.lpAddress,\n        latestLpCoreAddress: this.state.latestLpCoreAddress,\n        wss: this.state.wss,\n        http: this.state.http,\n        mnemonic: this.state.mnemonic,\n        ethGasStationAPIKey: this.state.ethGasStationAPIKey,\n        dynamicGasPrice: this.state.dynamicGasPrice,\n        liquidationAmount: this.state.liquidationAmount,\n        gasPrice: this.state.gasPrice,\n        gasLimit: this.state.gasLimit,\n        receiveATokens: this.state.receiveATokens\n      };\n      var blob = new Blob([JSON.stringify(configFile)], {\n        type: 'application/json'\n      });\n      FileSaver.saveAs(blob, 'settings.json');\n      this.updateSessionStorage(this.state);\n    });\n\n    _defineProperty(this, \"hiddenFileInput\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"uploadSettings\", () => {\n      this.hiddenFileInput.current.click();\n    });\n\n    _defineProperty(this, \"readSettings\", event => {\n      var fileUploaded = event.target.files[0];\n      var fr = new FileReader();\n\n      fr.onload = e => {\n        var result = JSON.parse(e.target.result);\n        this.setState({\n          liquidatorAddress: result.liquidatorAddress,\n          addressToLiquidate: result.addressToLiquidate,\n          collateralAddress: result.collateralAddress,\n          repayTokenAddress: result.repayTokenAddress,\n          lpAddressProviderAddress: result.lpAddressProviderAddress,\n          lpAddress: result.lpAddress,\n          latestLpCoreAddress: result.latestLpCoreAddress,\n          wss: result.wss,\n          http: result.http,\n          mnemonic: result.mnemonic,\n          ethGasStationAPIKey: result.ethGasStationAPIKey,\n          dynamicGasPrice: result.dynamicGasPrice,\n          liquidationAmount: result.liquidationAmount,\n          gasPrice: result.gasPrice,\n          gasLimit: result.gasLimit,\n          receiveATokens: result.receiveATokens\n        });\n        this.updateSessionStorage(result);\n        var formatted = JSON.stringify(result, null, 2);\n        console.log(formatted);\n      };\n\n      fr.readAsText(fileUploaded);\n    });\n\n    _defineProperty(this, \"updateSessionStorage\", data => {\n      sessionStorage.setItem('liquidatorAddress', data.liquidatorAddress);\n      sessionStorage.setItem('addressToLiquidate', data.addressToLiquidate);\n      sessionStorage.setItem('collateralAddress', data.collateralAddress);\n      sessionStorage.setItem('repayTokenAddress', data.repayTokenAddress);\n      sessionStorage.setItem('lpAddressProviderAddress', data.lpAddressProviderAddress);\n      sessionStorage.setItem('lpAddress', data.lpAddress);\n      sessionStorage.setItem('latestLpCoreAddress', data.latestLpCoreAddress);\n      sessionStorage.setItem('wss', data.wss);\n      sessionStorage.setItem('http', data.http);\n      sessionStorage.setItem('mnemonic', data.mnemonic);\n      sessionStorage.setItem('ethGasStationAPIKey', data.ethGasStationAPIKey);\n      sessionStorage.setItem('dynamicGasPrice', data.dynamicGasPrice);\n      sessionStorage.setItem('liquidationAmount', data.liquidationAmount);\n      sessionStorage.setItem('gasPrice', data.gasPrice);\n      sessionStorage.setItem('gasLimit', data.gasLimit);\n      sessionStorage.setItem('receiveATokens', data.receiveATokens);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      liquidatorAddress: sessionStorage.getItem('liquidatorAddress'),\n      addressToLiquidate: sessionStorage.getItem('addressToLiquidate'),\n      collateralAddress: sessionStorage.getItem('collateralAddress'),\n      repayTokenAddress: sessionStorage.getItem('repayTokenAddress'),\n      lpAddressProviderAddress: sessionStorage.getItem('lpAddressProviderAddress'),\n      lpAddress: sessionStorage.getItem('lpAddress'),\n      latestLpCoreAddress: sessionStorage.getItem('latestLpCoreAddress'),\n      wss: sessionStorage.getItem('wss'),\n      http: sessionStorage.getItem('http'),\n      mnemonic: sessionStorage.getItem('mnemonic'),\n      ethGasStationAPIKey: sessionStorage.getItem('ethGasStationAPIKey'),\n      dynamicGasPrice: sessionStorage.getItem('dynamicGasPrice') == 'true',\n      liquidationAmount: sessionStorage.getItem('liquidationAmount'),\n      gasPrice: sessionStorage.getItem('gasPrice'),\n      gasLimit: sessionStorage.getItem('gasLimit'),\n      receiveATokens: sessionStorage.getItem('receiveATokens') == 'true'\n    });\n  } //add write to session storage onchange on the unputs\n\n\n  render() {\n    console.log(this.state.liquidationAddressError, 'RENDER'); //this.updateSessionStorage(this.state)\n\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }, \"Liquidation Settings\"), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: this.state.formError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"Liquidator Address\",\n      error: this.state.liquidatorAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"Address which makes the liquidation call\",\n      value: this.state.liquidatorAddress,\n      onChange: event => {\n        this.setState({\n          liquidatorAddress: event.target.value\n        });\n        sessionStorage.setItem('liquidatorAddress', event.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Address To Liquidate\",\n      error: this.state.addressToLiquidateError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"Address to be liquidated\",\n      value: this.state.addressToLiquidate,\n      onChange: event => this.setState({\n        addressToLiquidate: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"Collateral Address\",\n      error: this.state.collateralAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"Address of the collateral to receive\",\n      value: this.state.collateralAddress,\n      onChange: event => this.setState({\n        collateralAddress: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Repay Token Address\",\n      error: this.state.repayTokenAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"Address of the token that is repaid\",\n      value: this.state.repayTokenAddress,\n      onChange: event => this.setState({\n        repayTokenAddress: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"LendingPoolAddressProvider Address\",\n      error: this.state.lpAddressProviderAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"LendingPoolAddressProvider contract address\",\n      value: this.state.lpAddressProviderAddress,\n      onChange: event => this.setState({\n        lpAddressProviderAddress: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"LendingPool Address\",\n      error: this.state.lpAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"LendingPool contract address\",\n      value: this.state.lpAddress,\n      onChange: event => this.setState({\n        lpAddress: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"LendingPoolCore Address\",\n      error: this.state.latestLpCoreAddressError,\n      errorContent: 'Please enter a valid address',\n      inputLabel: \"HEX\",\n      placeholder: \"LendingPoolCore contract address\",\n      value: this.state.latestLpCoreAddress,\n      onChange: event => this.setState({\n        latestLpCoreAddress: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Infura WSS Address\",\n      error: this.state.wssError,\n      errorContent: 'Must start with <wss://>',\n      inputLabel: \"URL\",\n      placeholder: \"Infura WSS project endpoint\",\n      value: this.state.wss,\n      onChange: event => this.setState({\n        wss: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"Infura HTTP Address\",\n      error: this.state.httpError,\n      errorContent: 'Must start with <https://>',\n      inputLabel: \"URL\",\n      placeholder: \"Infura http project endpoint\",\n      value: this.state.http,\n      onChange: event => this.setState({\n        http: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Wallet Mneumonic / Seed Phrase\",\n      error: this.state.mnemonicError,\n      errorContent: 'Must input 12 word seed phrase',\n      inputLabel: \"String\",\n      placeholder: \"12 word seed phrase\",\n      value: this.state.mnemonic,\n      onChange: event => this.setState({\n        mnemonic: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"Liquidation Amount\",\n      error: this.state.liquidationAmountError,\n      errorContent: 'Must be numeric',\n      inputLabel: \"WEI\",\n      placeholder: \"<0> for max liquidation\",\n      value: this.state.liquidationAmount,\n      onChange: event => this.setState({\n        liquidationAmount: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Gas Limit\",\n      error: this.state.gasLimitError,\n      errorContent: 'Must be numeric',\n      inputLabel: \"GAS\",\n      placeholder: \"Max amount of gas liquidator is allowed to spend\",\n      value: this.state.gasLimit,\n      onChange: event => this.setState({\n        gasLimit: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      widths: \"equal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }\n    }, __jsx(SettingsFormInput, {\n      label: \"ETH GAS STATION API KEY\",\n      error: this.state.ethGasStationAPIKeyError,\n      errorContent: 'None',\n      inputLabel: \"String\",\n      placeholder: \"Ethereum Gas station api key\",\n      value: this.state.ethGasStationAPIKey,\n      onChange: event => this.setState({\n        ethGasStationAPIKey: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }\n    }), __jsx(SettingsFormInput, {\n      label: \"Gas Price\",\n      error: this.state.gasPriceError,\n      errorContent: 'Must be numeric',\n      inputLabel: \"WEI\",\n      placeholder: \"Gas price\",\n      value: this.state.gasPrice,\n      onChange: event => this.setState({\n        gasPrice: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }\n    }, __jsx(Form.Input, {\n      label: \"Use Dynamic Gas Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }, __jsx(Checkbox, {\n      toggle: true,\n      checked: this.state.dynamicGasPrice,\n      onChange: () => this.setState(({\n        dynamicGasPrice\n      }) => ({\n        dynamicGasPrice: !dynamicGasPrice\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 15\n      }\n    })), __jsx(Form.Input, {\n      label: \"Receive Collateral as aTokens\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 13\n      }\n    }, __jsx(Checkbox, {\n      toggle: true,\n      checked: this.state.receiveATokens,\n      onChange: () => this.setState(({\n        receiveATokens\n      }) => ({\n        receiveATokens: !receiveATokens\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 15\n      }\n    }))), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }\n    }), __jsx(Button, {\n      primary: true,\n      labelPosition: \"left\",\n      icon: \"download\",\n      content: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }\n    }), __jsx(Button, {\n      type: \"button\",\n      content: \"Upload Settings\",\n      labelPosition: \"left\",\n      icon: \"file\",\n      onClick: this.uploadSettings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }\n    }), __jsx(\"input\", {\n      type: \"file\",\n      ref: this.hiddenFileInput,\n      onChange: this.readSettings,\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/Diddi/Documents/crypto/aave-liquidation/pages/settings.js"],"names":["React","Component","Form","Button","Input","Message","Checkbox","Layout","SettingsFormInput","FileSaver","web3","Settings","liquidatorAddress","addressToLiquidate","collateralAddress","repayTokenAddress","lpAddressProviderAddress","lpAddress","latestLpCoreAddress","wss","http","mnemonic","ethGasStationAPIKey","dynamicGasPrice","liquidationAmount","gasPrice","gasLimit","receiveATokens","formError","liquidatorAddressError","addressToLiquidateError","collateralAddressError","repayTokenAddressError","lpAddressProviderAddressError","lpAddressError","latestLpCoreAddressError","wssError","httpError","mnemonicError","ethGasStationAPIKeyError","dynamicGasPriceError","liquidationAmountError","gasPriceError","gasLimitError","receiveAtokensError","event","preventDefault","console","log","state","error","Object","keys","map","key","endsWith","validAddress","utils","checkAddressChecksum","setState","startsWith","split","length","isNaN","configFile","blob","Blob","JSON","stringify","type","saveAs","updateSessionStorage","createRef","hiddenFileInput","current","click","fileUploaded","target","files","fr","FileReader","onload","e","result","parse","formatted","readAsText","data","sessionStorage","setItem","componentDidMount","getItem","render","liquidationAddressError","onSubmit","value","errorMessage","uploadSettings","readSettings","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form, Button, Input, Message, Checkbox } from 'semantic-ui-react'\r\nimport Layout from '../components/Layout'\r\nimport SettingsFormInput from '../components/SettingFormInput'\r\nimport FileSaver from 'file-saver'\r\nimport web3 from '../src/web3.js'\r\n\r\nclass Settings extends Component {\r\n  state = {\r\n    liquidatorAddress: '',\r\n    addressToLiquidate: '',\r\n    collateralAddress: '',\r\n    repayTokenAddress: '',\r\n    lpAddressProviderAddress: '',\r\n    lpAddress: '',\r\n    latestLpCoreAddress: '',\r\n    wss: '',\r\n    http: '',\r\n    mnemonic: '',\r\n    ethGasStationAPIKey: '',\r\n    dynamicGasPrice: false,\r\n    liquidationAmount: '',\r\n    gasPrice: '',\r\n    gasLimit: '',\r\n    receiveATokens: false,\r\n    formError: false,\r\n    liquidatorAddressError: false,\r\n    addressToLiquidateError: false,\r\n    collateralAddressError: false,\r\n    repayTokenAddressError: false,\r\n    lpAddressProviderAddressError: false,\r\n    lpAddressError: false,\r\n    latestLpCoreAddressError: false,\r\n    wssError: false,\r\n    httpError: false,\r\n    mnemonicError: false,\r\n    ethGasStationAPIKeyError: false,\r\n    dynamicGasPriceError: false,\r\n    liquidationAmountError: false,\r\n    gasPriceError: false,\r\n    gasLimitError: false,\r\n    receiveAtokensError: false,\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log(this.state)\r\n\r\n    let error = false\r\n\r\n    // Address Validity Check\r\n    Object.keys(this.state).map((key) => {\r\n      if (key.endsWith('Address') || key == 'addressToLiquidate') {\r\n        var validAddress = !web3.web3.utils.checkAddressChecksum(\r\n          this.state[key]\r\n        )\r\n        this.setState({ [key + 'Error']: validAddress })\r\n        if (validAddress) {\r\n          error = true\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!this.state.wss.startsWith('wss://')) {\r\n      this.setState({ wssError: true })\r\n      error = true\r\n    }\r\n\r\n    if (!this.state.http.startsWith('https://')) {\r\n      this.setState({ httpError: true })\r\n      error = true\r\n    }\r\n\r\n    if (this.state.mnemonic.split(' ').length != 12) {\r\n      this.setState({ mnemonicError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.liquidationAmount)) {\r\n      this.setState({ liquidationAmountError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.gasLimit)) {\r\n      this.setState({ gasLimitError: true })\r\n      error = true\r\n    }\r\n\r\n    if (isNaN(this.state.gasPrice)) {\r\n      this.setState({ gasPriceError: true })\r\n      error = true\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ formError: true })\r\n      return\r\n    }\r\n\r\n    var configFile = {\r\n      liquidatorAddress: this.state.liquidatorAddress,\r\n      addressToLiquidate: this.state.addressToLiquidate,\r\n      collateralAddress: this.state.collateralAddress,\r\n      repayTokenAddress: this.state.repayTokenAddress,\r\n      lpAddressProviderAddress: this.state.lpAddressProviderAddress,\r\n      lpAddress: this.state.lpAddress,\r\n      latestLpCoreAddress: this.state.latestLpCoreAddress,\r\n      wss: this.state.wss,\r\n      http: this.state.http,\r\n      mnemonic: this.state.mnemonic,\r\n      ethGasStationAPIKey: this.state.ethGasStationAPIKey,\r\n      dynamicGasPrice: this.state.dynamicGasPrice,\r\n      liquidationAmount: this.state.liquidationAmount,\r\n      gasPrice: this.state.gasPrice,\r\n      gasLimit: this.state.gasLimit,\r\n      receiveATokens: this.state.receiveATokens,\r\n    }\r\n    var blob = new Blob([JSON.stringify(configFile)], {\r\n      type: 'application/json',\r\n    })\r\n    FileSaver.saveAs(blob, 'settings.json')\r\n    this.updateSessionStorage(this.state)\r\n  }\r\n\r\n  hiddenFileInput = React.createRef()\r\n  uploadSettings = () => {\r\n    this.hiddenFileInput.current.click()\r\n  }\r\n  readSettings = (event) => {\r\n    var fileUploaded = event.target.files[0]\r\n    var fr = new FileReader()\r\n    fr.onload = (e) => {\r\n      var result = JSON.parse(e.target.result)\r\n\r\n      this.setState({\r\n        liquidatorAddress: result.liquidatorAddress,\r\n        addressToLiquidate: result.addressToLiquidate,\r\n        collateralAddress: result.collateralAddress,\r\n        repayTokenAddress: result.repayTokenAddress,\r\n        lpAddressProviderAddress: result.lpAddressProviderAddress,\r\n        lpAddress: result.lpAddress,\r\n        latestLpCoreAddress: result.latestLpCoreAddress,\r\n        wss: result.wss,\r\n        http: result.http,\r\n        mnemonic: result.mnemonic,\r\n        ethGasStationAPIKey: result.ethGasStationAPIKey,\r\n        dynamicGasPrice: result.dynamicGasPrice,\r\n        liquidationAmount: result.liquidationAmount,\r\n        gasPrice: result.gasPrice,\r\n        gasLimit: result.gasLimit,\r\n        receiveATokens: result.receiveATokens,\r\n      })\r\n      this.updateSessionStorage(result)\r\n      var formatted = JSON.stringify(result, null, 2)\r\n      console.log(formatted)\r\n    }\r\n\r\n    fr.readAsText(fileUploaded)\r\n  }\r\n\r\n  updateSessionStorage = (data) => {\r\n    sessionStorage.setItem('liquidatorAddress', data.liquidatorAddress)\r\n    sessionStorage.setItem('addressToLiquidate', data.addressToLiquidate)\r\n    sessionStorage.setItem('collateralAddress', data.collateralAddress)\r\n    sessionStorage.setItem('repayTokenAddress', data.repayTokenAddress)\r\n    sessionStorage.setItem(\r\n      'lpAddressProviderAddress',\r\n      data.lpAddressProviderAddress\r\n    )\r\n    sessionStorage.setItem('lpAddress', data.lpAddress)\r\n    sessionStorage.setItem('latestLpCoreAddress', data.latestLpCoreAddress)\r\n    sessionStorage.setItem('wss', data.wss)\r\n    sessionStorage.setItem('http', data.http)\r\n    sessionStorage.setItem('mnemonic', data.mnemonic)\r\n    sessionStorage.setItem('ethGasStationAPIKey', data.ethGasStationAPIKey)\r\n    sessionStorage.setItem('dynamicGasPrice', data.dynamicGasPrice)\r\n    sessionStorage.setItem('liquidationAmount', data.liquidationAmount)\r\n    sessionStorage.setItem('gasPrice', data.gasPrice)\r\n    sessionStorage.setItem('gasLimit', data.gasLimit)\r\n    sessionStorage.setItem('receiveATokens', data.receiveATokens)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      liquidatorAddress: sessionStorage.getItem('liquidatorAddress'),\r\n      addressToLiquidate: sessionStorage.getItem('addressToLiquidate'),\r\n      collateralAddress: sessionStorage.getItem('collateralAddress'),\r\n      repayTokenAddress: sessionStorage.getItem('repayTokenAddress'),\r\n      lpAddressProviderAddress: sessionStorage.getItem(\r\n        'lpAddressProviderAddress'\r\n      ),\r\n      lpAddress: sessionStorage.getItem('lpAddress'),\r\n      latestLpCoreAddress: sessionStorage.getItem('latestLpCoreAddress'),\r\n      wss: sessionStorage.getItem('wss'),\r\n      http: sessionStorage.getItem('http'),\r\n      mnemonic: sessionStorage.getItem('mnemonic'),\r\n      ethGasStationAPIKey: sessionStorage.getItem('ethGasStationAPIKey'),\r\n      dynamicGasPrice: sessionStorage.getItem('dynamicGasPrice') == 'true',\r\n      liquidationAmount: sessionStorage.getItem('liquidationAmount'),\r\n      gasPrice: sessionStorage.getItem('gasPrice'),\r\n      gasLimit: sessionStorage.getItem('gasLimit'),\r\n      receiveATokens: sessionStorage.getItem('receiveATokens') == 'true',\r\n    })\r\n  }\r\n  //add write to session storage onchange on the unputs\r\n  render() {\r\n    console.log(this.state.liquidationAddressError, 'RENDER')\r\n    //this.updateSessionStorage(this.state)\r\n    return (\r\n      <Layout>\r\n        <h1>Liquidation Settings</h1>\r\n        <Form onSubmit={this.onSubmit} error={this.state.formError}>\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Liquidator Address\"\r\n              error={this.state.liquidatorAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address which makes the liquidation call\"\r\n              value={this.state.liquidatorAddress}\r\n              onChange={(event) => {\r\n                this.setState({ liquidatorAddress: event.target.value })\r\n                sessionStorage.setItem('liquidatorAddress', event.target.value)\r\n              }}\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Address To Liquidate\"\r\n              error={this.state.addressToLiquidateError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address to be liquidated\"\r\n              value={this.state.addressToLiquidate}\r\n              onChange={(event) =>\r\n                this.setState({ addressToLiquidate: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Collateral Address\"\r\n              error={this.state.collateralAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address of the collateral to receive\"\r\n              value={this.state.collateralAddress}\r\n              onChange={(event) =>\r\n                this.setState({ collateralAddress: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Repay Token Address\"\r\n              error={this.state.repayTokenAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"Address of the token that is repaid\"\r\n              value={this.state.repayTokenAddress}\r\n              onChange={(event) =>\r\n                this.setState({ repayTokenAddress: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"LendingPoolAddressProvider Address\"\r\n              error={this.state.lpAddressProviderAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPoolAddressProvider contract address\"\r\n              value={this.state.lpAddressProviderAddress}\r\n              onChange={(event) =>\r\n                this.setState({\r\n                  lpAddressProviderAddress: event.target.value,\r\n                })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"LendingPool Address\"\r\n              error={this.state.lpAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPool contract address\"\r\n              value={this.state.lpAddress}\r\n              onChange={(event) =>\r\n                this.setState({ lpAddress: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"LendingPoolCore Address\"\r\n              error={this.state.latestLpCoreAddressError}\r\n              errorContent={'Please enter a valid address'}\r\n              inputLabel=\"HEX\"\r\n              placeholder=\"LendingPoolCore contract address\"\r\n              value={this.state.latestLpCoreAddress}\r\n              onChange={(event) =>\r\n                this.setState({ latestLpCoreAddress: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Infura WSS Address\"\r\n              error={this.state.wssError}\r\n              errorContent={'Must start with <wss://>'}\r\n              inputLabel=\"URL\"\r\n              placeholder=\"Infura WSS project endpoint\"\r\n              value={this.state.wss}\r\n              onChange={(event) => this.setState({ wss: event.target.value })}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Infura HTTP Address\"\r\n              error={this.state.httpError}\r\n              errorContent={'Must start with <https://>'}\r\n              inputLabel=\"URL\"\r\n              placeholder=\"Infura http project endpoint\"\r\n              value={this.state.http}\r\n              onChange={(event) => this.setState({ http: event.target.value })}\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Wallet Mneumonic / Seed Phrase\"\r\n              error={this.state.mnemonicError}\r\n              errorContent={'Must input 12 word seed phrase'}\r\n              inputLabel=\"String\"\r\n              placeholder=\"12 word seed phrase\"\r\n              value={this.state.mnemonic}\r\n              onChange={(event) =>\r\n                this.setState({ mnemonic: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"Liquidation Amount\"\r\n              error={this.state.liquidationAmountError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"WEI\"\r\n              placeholder=\"<0> for max liquidation\"\r\n              value={this.state.liquidationAmount}\r\n              onChange={(event) =>\r\n                this.setState({ liquidationAmount: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Gas Limit\"\r\n              error={this.state.gasLimitError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"GAS\"\r\n              placeholder=\"Max amount of gas liquidator is allowed to spend\"\r\n              value={this.state.gasLimit}\r\n              onChange={(event) =>\r\n                this.setState({ gasLimit: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group widths=\"equal\">\r\n            <SettingsFormInput\r\n              label=\"ETH GAS STATION API KEY\"\r\n              error={this.state.ethGasStationAPIKeyError}\r\n              errorContent={'None'}\r\n              inputLabel=\"String\"\r\n              placeholder=\"Ethereum Gas station api key\"\r\n              value={this.state.ethGasStationAPIKey}\r\n              onChange={(event) =>\r\n                this.setState({ ethGasStationAPIKey: event.target.value })\r\n              }\r\n            />\r\n            <SettingsFormInput\r\n              label=\"Gas Price\"\r\n              error={this.state.gasPriceError}\r\n              errorContent={'Must be numeric'}\r\n              inputLabel=\"WEI\"\r\n              placeholder=\"Gas price\"\r\n              value={this.state.gasPrice}\r\n              onChange={(event) =>\r\n                this.setState({ gasPrice: event.target.value })\r\n              }\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Input label=\"Use Dynamic Gas Price\">\r\n              <Checkbox\r\n                toggle\r\n                checked={this.state.dynamicGasPrice}\r\n                onChange={() =>\r\n                  this.setState(({ dynamicGasPrice }) => ({\r\n                    dynamicGasPrice: !dynamicGasPrice,\r\n                  }))\r\n                }\r\n              />\r\n            </Form.Input>\r\n\r\n            <Form.Input label=\"Receive Collateral as aTokens\">\r\n              <Checkbox\r\n                toggle\r\n                checked={this.state.receiveATokens}\r\n                onChange={() =>\r\n                  this.setState(({ receiveATokens }) => ({\r\n                    receiveATokens: !receiveATokens,\r\n                  }))\r\n                }\r\n              />\r\n            </Form.Input>\r\n          </Form.Group>\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          <Button primary labelPosition=\"left\" icon=\"download\" content=\"Save\" />\r\n\r\n          <Button\r\n            type=\"button\"\r\n            content=\"Upload Settings\"\r\n            labelPosition=\"left\"\r\n            icon=\"file\"\r\n            onClick={this.uploadSettings}\r\n          />\r\n          <input\r\n            type=\"file\"\r\n            ref={this.hiddenFileInput}\r\n            onChange={this.readSettings}\r\n            style={{ display: 'none' }}\r\n          />\r\n        </Form>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Settings\r\n"]},"metadata":{},"sourceType":"module"}